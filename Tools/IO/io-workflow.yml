variables:
  ASSET_ID: $CI_PROJECT_PATH
  WORKFLOW_ENGINE_VERSION: "2021.06.0"
  POLARIS_PROJECT_NAME: $CI_PROJECT_NAME
  BLACKDUCK_PROJECT_NAME: $CI_PROJECT_NAME:$BLACKDUCK_PROJECT_VERSION
  SCM_OWNER: $CI_PROJECT_NAMESPACE
  SCM_REPO_NAME: $CI_PROJECT_NAME
  SCM_BRANCH_NAME : $CI_COMMIT_BRANCH
  GITLAB_HOST_URL: $CI_SERVER_URL
  IS_SAST_ENABLED: "false"
  IS_SCA_ENABLED: "false"
  IS_DAST_ENABLED: "false"
  MANIFEST_TYPE: "yml"
  GITLAB_URL: "https://gitlab.com"
  IO_ARTIFACT_BASEURL: "/synopsys-io/io-artifacts/-/raw/main/Templates/"
  IO_MANIFEST_URL: "${GITLAB_URL}${IO_ARTIFACT_BASEURL}Manifest/${RISKLEVEL}Risk-IO-manifest.json"
  IO_RISK_MATRIX_URL: "${GITLAB_URL}${IO_ARTIFACT_BASEURL}RiskMatrix/${RISKLEVEL}Risk-RiskMatrix.json"
  IO_TPI_URL: "${GITLAB_URL}${IO_ARTIFACT_BASEURL}TPI/${RISKLEVEL}Risk-tpi.json"
  IO_RISK_MATRIX_FILENAME: "${RISKLEVEL}Risk-RiskMatrix.json"
  IO_TPI_FILENAME: "${RISKLEVEL}Risk-tpi.json"
  IO_RISK_LEVEL: "$RISKLEVEL"

IO_SETUP:
  stage: io_setup
  image: registry.gitlab.com/synopsys-io/io-artifacts/io-env:latest
  artifacts:
      paths:
          - $CI_PROJECT_DIR/manifest.env
  script:
    - |
        echo "IO Risk Level -> $IO_RISK_LEVEL"
        echo "IO Manifest URL -> $IO_MANIFEST_URL"
        echo "IO Risk Matrix URL -> $IO_RISK_MATRIX_URL"
        echo "IO TPI URL -> $IO_TPI_URL"
    - echo "IO_MANIFEST_URL=${IO_MANIFEST_URL}" >> manifest.env
    #- wget "${GITLAB_URL}/synopsys-io/io-artifacts/-/raw/main/io_onboarding.sh"
    - wget $IO_RISK_MATRIX_URL
    - wget $IO_TPI_URL
    #- sed -i -e 's/\r$//' io_onboarding.sh
    #- chmod +x io_onboarding.sh
    - /home/devops/io_onboarding.sh --io.url=$IO_SERVER_URL --io.token=$IO_ACCESS_TOKEN --asset.id=$CI_PROJECT_PATH --calculator.meta.path=$IO_RISK_MATRIX_FILENAME --tpi.path=$IO_TPI_FILENAME --manifest.type=$MANIFEST_TYPE

IO:
  stage: io
  image: registry.gitlab.com/synopsys-io/io-artifacts/io-env:latest
  artifacts:
      paths:
          - $CI_PROJECT_DIR/scans.env
  script:
      - source $CI_PROJECT_DIR/manifest.env
      - rm -rf prescription.sh
      #- wget "${GITLAB_URL}/synopsys-io/io-artifacts/-/raw/main/prescription.sh"
      #- sed -i -e 's/\r$//' prescription.sh
      #- chmod +x prescription.sh
      - /home/devops/prescription.sh
        --stage="IO"
        --persona=$PERSONA
        --io.url=$IO_SERVER_URL
        --io.token=$IO_ACCESS_TOKEN
        --io.manifest.url=$IO_MANIFEST_URL
        --manifest.type=$MANIFEST_TYPE
        --asset.id=$ASSET_ID
        --release.type=$RELEASE_TYPE
        --sensitive.package.pattern=$SENSITIVE_PACKAGE_PATTERN
        --sast.rescan.threshold=$SAST_RESCAN_THRESHOLD
        --sca.rescan.threshold=$SCA_RESCAN_THRESHOLD
        --scm.type="gitlab"
        --workflow.url=$WORKFLOW_ENGINE_SERVER_URL
        --workflow.version=$WORKFLOW_ENGINE_VERSION
        --polaris.project.name=$POLARIS_PROJECT_NAME
        --polaris.url=$POLARIS_SERVER_URL
        --polaris.token=$POLARIS_ACCESS_TOKEN
        --blackduck.project.name="$BLACKDUCK_PROJECT_NAME"
        --blackduck.url=$BLACKDUCK_SERVER_URL
        --blackduck.api.token=$BLACKDUCK_ACCESS_TOKEN
        --scm.owner=$SCM_OWNER
        --scm.repo.name=$SCM_REPO_NAME
        --scm.branch.name=$SCM_BRANCH_NAME
        --gitlab.url=$GITLAB_HOST_URL
        --gitlab.token=$GITLAB_TOKEN
        --coverity.url=$COVERITY_SERVER_URL
        --coverity.stream=$COVERITY_STREAM
        --coverity.username=$COVERITY_USERNAME
        --coverity.password=$COVERITY_PASSWORD
        --jira.api.url=$JIRA_URL
        --jira.project.name=$JIRA_PROJECT_KEY
        --jira.issues.query=$JIRA_ISSUES_QUERY
        --jira.username=$JIRA_USERNAME
        --jira.auth.token=$JIRA_AUTH_TOKEN
        --jira.assignee=$JIRA_ASSIGNEE
        --jira.enable=$ENABLE_JIRA
        --IS_SAST_ENABLED=$IS_SAST_ENABLED
        --IS_SCA_ENABLED=$IS_SCA_ENABLED
        --IS_DAST_ENABLED=$IS_DAST_ENABLED
        ${ADDITIONALARGS}
      - IS_SAST_ENABLED=$(jq -r '.security.activities.sast.enabled' result.json)
      - IS_SCA_ENABLED=$(jq -r '.security.activities.sca.enabled' result.json)
      - echo "IS_SAST_ENABLED=${IS_SAST_ENABLED}" >> scans.env
      - echo "IS_SCA_ENABLED=${IS_SCA_ENABLED}" >> scans.env
      - rm -rf synopsys-io.yml
      - rm -rf synopsys-io.json
      - |
        echo "================================== IO Prescription ======================================="
        echo "Is SAST Enabled - ${IS_SAST_ENABLED}"
        echo "Is SCA Enabled - ${IS_SCA_ENABLED}"
        if [ $PERSONA == "devsecops" ]; then
            echo "==================================== IO Risk Score ======================================="
            echo "Buisness Criticality Score - $(jq -r '.riskScoreCard.bizCriticalityScore' result.json)"
            echo "Data Class Score - $(jq -r '.riskScoreCard.dataClassScore' result.json)"
            echo "Access Score - $(jq -r '.riskScoreCard.accessScore' result.json)"
            echo "Open Vulnerability Score - $(jq -r '.riskScoreCard.openVulnScore' result.json)"
            echo "Change Significance Score - $(jq -r '.riskScoreCard.changeSignificanceScore' result.json)"
            export bizScore=$(jq -r '.riskScoreCard.bizCriticalityScore' result.json | cut -d'/' -f2)
            export dataScore=$(jq -r '.riskScoreCard.dataClassScore' result.json | cut -d'/' -f2)
            export accessScore=$(jq -r '.riskScoreCard.accessScore' result.json | cut -d'/' -f2)
            export vulnScore=$(jq -r '.riskScoreCard.openVulnScore' result.json | cut -d'/' -f2)
            export changeScore=$(jq -r '.riskScoreCard.changeSignificanceScore' result.json | cut -d'/' -f2)
            echo -n "Total Score - " && echo "$bizScore + $dataScore + $accessScore + $vulnScore + $changeScore" | bc
        fi
  dependencies:
    - IO_SETUP

IO_WORKFLOWENGINE:
  stage: workflowengine
  image: registry.gitlab.com/synopsys-io/io-artifacts/io-env:latest
  artifacts:
      paths:
        - $CI_PROJECT_DIR/*.sarif.json
        - $CI_PROJECT_DIR/wf-output.json
        - $CI_PROJECT_DIR/wf-output.txt
  script:
      - source $CI_PROJECT_DIR/manifest.env
      - source $CI_PROJECT_DIR/scans.env
      #- >
      #    if [ ! -f 'prescription.sh' ]; then
      #     wget "${GITLAB_URL}/synopsys-io/io-artifacts/-/raw/main/prescription.sh"
      #    fi
      #- sed -i -e 's/\r$//' prescription.sh
      #- chmod +x prescription.sh
      - /home/devops/prescription.sh
        --stage="WORKFLOW"
        --persona=$PERSONA
        --io.url=$IO_SERVER_URL
        --io.token=$IO_ACCESS_TOKEN
        --io.manifest.url=$IO_MANIFEST_URL
        --manifest.type=$MANIFEST_TYPE
        --asset.id=$ASSET_ID
        --workflow.url=$WORKFLOW_ENGINE_SERVER_URL
        --workflow.version=$WORKFLOW_ENGINE_VERSION
        --polaris.project.name=$POLARIS_PROJECT_NAME
        --polaris.url=$POLARIS_SERVER_URL
        --polaris.token=$POLARIS_ACCESS_TOKEN
        --blackduck.project.name="$BLACKDUCK_PROJECT_NAME"
        --blackduck.url=$BLACKDUCK_SERVER_URL
        --blackduck.api.token=$BLACKDUCK_ACCESS_TOKEN
        --jira.api.url=$JIRA_URL
        --jira.project.name=$JIRA_PROJECT_KEY
        --jira.issues.query=$JIRA_ISSUES_QUERY
        --jira.username=$JIRA_USERNAME
        --jira.auth.token=$JIRA_AUTH_TOKEN
        --jira.assignee=$JIRA_ASSIGNEE
        --jira.enable=$ENABLE_JIRA
        --rally.api.url=$RALLY_URL
        --rally.project.name=$RALLY_PROJECT_KEY
        --rally.assignee=$RALLY_ASSIGNEE
        --rally.auth.token=$RALLY_AUTH_TOKEN
        --IS_SAST_ENABLED=$IS_SAST_ENABLED
        --IS_SCA_ENABLED=$IS_SCA_ENABLED
        --IS_DAST_ENABLED=$IS_DAST_ENABLED
        --slack.channel.id=$SLACK_CHANNEL_ID
        --slack.token=$SLACK_TOKEN
        --coverity.url=$COVERITY_SERVER_URL
        --coverity.stream=$COVERITY_STREAM
        --coverity.username=$COVERITY_USERNAME
        --coverity.password=$COVERITY_PASSWORD
        ${ADDITIONALARGS}
      - echo "Triggering WorkFlowEngine "
      - >
          if [ $MANIFEST_TYPE == "yml" ]; then
            java -jar WorkflowClient.jar --workflowengine.url=$WORKFLOW_ENGINE_SERVER_URL --io.manifest.path=synopsys-io.yml
          elif [ $MANIFEST_TYPE == "json" ]; then
            java -jar WorkflowClient.jar --workflowengine.url=$WORKFLOW_ENGINE_SERVER_URL --io.manifest.path=synopsys-io.json
          fi
      - rm -rf synopsys-io.yml
      - rm -rf synopsys-io.json
      - |
        echo "========================== IO WorkflowEngine Summary ============================" 
        echo "Breaker Status - $(jq -r '.breaker.status' wf-output.json)"
  dependencies:
    - IO
    - IO_SETUP
       
PUSH_TEAM_NOTIFICATIONS:
  stage: notify_teams
  image: registry.gitlab.com/synopsys-io/io-artifacts/io-env:latest
  rules:
  - if: '$TEAMS_WEBHOOK_URL =~ /^./'
    when: always
  script:
    - > 
      if [ "$(jq -r '.breaker.status' wf-output.json)" = "true" ]; then
          echo "Sending Notifications to Teams..."
          curl --location $TEAMS_WEBHOOK_URL --header 'Content-Type: application/json' --data-raw "{"text":\"$(cat wf-output.txt)\"}"
      else
          echo "No issues found with matching the build breaker criteria"
      fi
  dependencies:
    - IO_WORKFLOWENGINE
